// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectReviewWebAPI.Infrastructure.Persistence;

#nullable disable

namespace ProjectReviewWebAPI.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231215161456_FirstMigration")]
    partial class FirstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d5f2c232-4272-43da-a2d0-a7ae3f76517b",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "12be0a2b-701d-4875-b33e-98514c5bff6a",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjectReviewWebAPI.Domain.Entities.Comment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = "c9d4c053-49b6-410c-bc78-2d54a9991870",
                            Comments = "How is it going?",
                            CreatedAt = new DateTime(2023, 12, 15, 17, 14, 55, 857, DateTimeKind.Local).AddTicks(20),
                            ModifiedAt = new DateTime(2023, 12, 15, 17, 14, 55, 857, DateTimeKind.Local).AddTicks(34),
                            UserId = "c9d4c053-49b6-410c-bc78-2d54a97890"
                        },
                        new
                        {
                            Id = "3d490a70-94ce-4d15-9494-5248280c2ce3",
                            Comments = "It's going great!",
                            CreatedAt = new DateTime(2023, 12, 15, 17, 14, 55, 857, DateTimeKind.Local).AddTicks(36),
                            ModifiedAt = new DateTime(2023, 12, 15, 17, 14, 55, 857, DateTimeKind.Local).AddTicks(37),
                            UserId = "b9d4c053-49b6-410c-uj78-2d54a9991819"
                        });
                });

            modelBuilder.Entity("ProjectReviewWebAPI.Domain.Entities.ProfilePhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("IsMain")
                        .HasColumnType("tinyint");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProfilePhotos");
                });

            modelBuilder.Entity("ProjectReviewWebAPI.Domain.Entities.Project", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("CoverImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectOwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectOwnerId");

                    b.HasIndex("TransactionId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = "c9d4c053-49b6-410c-bc78-2d54a9991870",
                            Category = 2,
                            CoverImage = "urlImage",
                            CreatedAt = new DateTime(2023, 12, 15, 17, 14, 55, 857, DateTimeKind.Local).AddTicks(355),
                            ModifiedAt = new DateTime(2023, 12, 15, 17, 14, 55, 857, DateTimeKind.Local).AddTicks(355),
                            ProjectDescription = "To build a house.",
                            ProjectName = "House_Project",
                            ProjectOwnerId = "b9d4c053-49b6-410c-uj78-2d54a9991819"
                        },
                        new
                        {
                            Id = "c9d4c053-49b6-410c-bc78-2d54a99911123",
                            Category = 1,
                            CoverImage = "urlImage",
                            CreatedAt = new DateTime(2023, 12, 15, 17, 14, 55, 857, DateTimeKind.Local).AddTicks(359),
                            ModifiedAt = new DateTime(2023, 12, 15, 17, 14, 55, 857, DateTimeKind.Local).AddTicks(359),
                            ProjectDescription = "To build a school.",
                            ProjectName = "School_Project",
                            ProjectOwnerId = "c9d4c053-49b6-410c-bc78-2d54a97890"
                        });
                });

            modelBuilder.Entity("ProjectReviewWebAPI.Domain.Entities.ProjectCommencementDetail", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("JobAcceptanceStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProjectCompletionStatus")
                        .HasColumnType("int");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ProjectLevelApprovalStatus")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectStartApproval")
                        .HasColumnType("int");

                    b.Property<string>("ServiceProviderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("ProjectCommencementDetail");
                });

            modelBuilder.Entity("ProjectReviewWebAPI.Domain.Entities.Rating", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("AverageRating")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RateCount")
                        .HasColumnType("int");

                    b.Property<int>("StarRating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("ProjectReviewWebAPI.Domain.Entities.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("ProjectReviewWebAPI.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationReviewStatus")
                        .HasColumnType("int");

                    b.Property<int?>("ApplicationStatus")
                        .HasColumnType("int");

                    b.Property<decimal?>("ChargeRate")
                        .HasColumnType("Money");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectCommencementDetailId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Specialization")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProjectCommencementDetailId");

                    b.HasIndex("TransactionId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b9d4c053-49b6-410c-uj78-2d54a9991819",
                            AccessFailedCount = 0,
                            ApplicationReviewStatus = 0,
                            ConcurrencyStamp = "f6dbbcd4-025c-4c21-811d-6d5779183cb1",
                            CreatedAt = new DateTime(2023, 12, 15, 17, 14, 55, 857, DateTimeKind.Local).AddTicks(809),
                            Email = "adex@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Adedayo",
                            LastName = "Banji",
                            LockoutEnabled = false,
                            ModifiedAt = new DateTime(2023, 12, 15, 17, 14, 55, 857, DateTimeKind.Local).AddTicks(811),
                            PasswordHash = "adex1234",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5644745d-e752-4788-a7e8-3f0ee3fa8241",
                            TwoFactorEnabled = false,
                            UserName = "Adex"
                        },
                        new
                        {
                            Id = "c9d4c053-49b6-410c-bc78-2d54a97890",
                            AccessFailedCount = 0,
                            ApplicationReviewStatus = 0,
                            ConcurrencyStamp = "ab735b4e-66b9-414d-9a94-b72915afc093",
                            CreatedAt = new DateTime(2023, 12, 15, 17, 14, 55, 857, DateTimeKind.Local).AddTicks(835),
                            Email = "bobson@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Boboye",
                            LastName = "Adelani",
                            LockoutEnabled = false,
                            ModifiedAt = new DateTime(2023, 12, 15, 17, 14, 55, 857, DateTimeKind.Local).AddTicks(836),
                            PasswordHash = "bobo1234",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2bee7c57-5526-4e83-8ff4-39730c2494eb",
                            TwoFactorEnabled = false,
                            UserName = "Bobson"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ProjectReviewWebAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ProjectReviewWebAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectReviewWebAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ProjectReviewWebAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectReviewWebAPI.Domain.Entities.Project", b =>
                {
                    b.HasOne("ProjectReviewWebAPI.Domain.Entities.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectOwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectReviewWebAPI.Domain.Entities.Transaction", null)
                        .WithMany("Projects")
                        .HasForeignKey("TransactionId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectReviewWebAPI.Domain.Entities.ProjectCommencementDetail", b =>
                {
                    b.HasOne("ProjectReviewWebAPI.Domain.Entities.Project", null)
                        .WithOne("ProjectCommencementDetail")
                        .HasForeignKey("ProjectReviewWebAPI.Domain.Entities.ProjectCommencementDetail", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectReviewWebAPI.Domain.Entities.User", b =>
                {
                    b.HasOne("ProjectReviewWebAPI.Domain.Entities.ProjectCommencementDetail", null)
                        .WithMany("Users")
                        .HasForeignKey("ProjectCommencementDetailId");

                    b.HasOne("ProjectReviewWebAPI.Domain.Entities.Transaction", null)
                        .WithMany("Users")
                        .HasForeignKey("TransactionId");

                    b.HasOne("ProjectReviewWebAPI.Domain.Entities.Rating", "Rating")
                        .WithMany("Users")
                        .HasForeignKey("UserId");

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("ProjectReviewWebAPI.Domain.Entities.Project", b =>
                {
                    b.Navigation("ProjectCommencementDetail")
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectReviewWebAPI.Domain.Entities.ProjectCommencementDetail", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ProjectReviewWebAPI.Domain.Entities.Rating", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ProjectReviewWebAPI.Domain.Entities.Transaction", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ProjectReviewWebAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
